type
  TRSInterfaceItemFinder = record(TSRLBaseRecord)
    GetSearchBoxesFunction: function: TBoxArray of object;
  end;

function TRSInterfaceItemFinder.Find(Item: TRSItem; out Box: TBox): Boolean;
var
  Boxes: TBoxArray;
begin
  if (@Self.GetSearchBoxesFunction = nil) then
    Self.Fatal('ItemFinder.GetSearchBoxesFunction = nil');

  Result := ItemFinder.Find(Item, Self.GetSearchBoxesFunction(), 1, Boxes);
  if Result then
    Box := Boxes[0];
end;

function TRSInterfaceItemFinder.FindAll(Item: TRSItem; out Boxes: TBoxArray): Boolean;
begin
  if (@Self.GetSearchBoxesFunction = nil) then
    Self.Fatal('ItemFinder.GetSearchBoxesFunction = nil');

  Result := ItemFinder.Find(Item, Self.GetSearchBoxesFunction(), 0, Boxes);
end;

function TRSInterfaceItemFinder.IndexOf(Item: TRSItem): Integer;
var
  Indices: TIntegerArray;
begin
  if (@Self.GetSearchBoxesFunction = nil) then
    Self.Fatal('ItemFinder.GetSearchBoxesFunction = nil');

  Result := -1;
  if ItemFinder.Find(Item, Self.GetSearchBoxesFunction(), 1, Indices) then
    Result := Indices[0];
end;

function TRSInterfaceItemFinder.IndicesOf(Item: TRSItem): TIntegerArray; overload;
var
  Indices: TIntegerArray;
begin
  if (@Self.GetSearchBoxesFunction = nil) then
    Self.Fatal('ItemFinder.GetSearchBoxesFunction = nil');

  if ItemFinder.Find(Item, Self.GetSearchBoxesFunction(), 0, Indices) then
    Result := Indices;
end;

function TRSInterfaceItemFinder.IndicesOf(Items: TRSItemArray): TIntegerArray; overload;
var
  Item: TRSItem;
  Indices: TIntegerArray;
begin
  if (@Self.GetSearchBoxesFunction = nil) then
    Self.Fatal('ItemFinder.GetSearchBoxesFunction = nil');

  for Item in Items do
    if ItemFinder.Find(Item, Self.GetSearchBoxesFunction(), 0, Indices) then
      Result += Indices;
end;

function TRSInterfaceItemFinder.Contains(Item: TRSItem): Boolean; overload;
begin
  Result := Self.IndexOf(Item) > -1;
end;

function TRSInterfaceItemFinder.Contains(Items: TRSItemArray): Boolean; overload;
var
  Item: TRSItem;
begin
  for Item in Items do
    if not Self.Contains(Item) then
      Exit;

  Result := True;
end;

function TRSInterfaceItemFinder.ContainsAny(Items: TRSItemArray): Boolean;
var
  Item: TRSItem;
begin
  for Item in Items do
    if Self.Contains(Item) then
    begin
      Result := True;
      Exit;
    end;
end;

function TRSInterfaceItemFinder.Count(Item: TRSItem): Integer;
begin
  Result := Length(Self.IndicesOf(Item));
end;

function TRSInterfaceItemFinder.CountStack(Item: TRSItem): Integer;
begin
end;
