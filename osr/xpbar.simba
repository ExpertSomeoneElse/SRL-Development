{$DEFINE SRL_XPBAR_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSXPBarSize = (SMALL, MEDIUM, LARGE);

  TRSXPBar = record(TRSInterface)
    Bitmaps: array[ERSXPBarSize] of TMufasaBitmap;
    BitmapsLoaded: Boolean;

    Font: TFontSet;
    Size: ERSXPBarSize;
  end;

procedure TRSXPBar.FreeBitmaps;
begin
  Self.Bitmaps[ERSXPBarSize.SMALL].Free();
  Self.Bitmaps[ERSXPBarSize.MEDIUM].Free();
  Self.Bitmaps[ERSXPBarSize.LARGE].Free();
end;

procedure TRSXPBar.LoadBitmaps;
begin
  if Self.BitmapsLoaded then
    Exit;

  Self.BitmapsLoaded := True;

  Self.Bitmaps[ERSXPBarSize.SMALL]  := GetMufasaBitmap(BitmapFromString(119, 29, 'meJzt2jERgAAQA0G8YIASAxigxL8QOgYDfxTsThRcnXXbV5vfcV42tyfywgyRAyIHRA6IHBA5IHJA5IDIAZEDIgdEDogcEDkgckDkgMgBkQMiB0QOiBwQOSByQOSAyIF3ZJvb5w+xn+wG5pOp+A=='));
  Self.Bitmaps[ERSXPBarSize.MEDIUM] := GetMufasaBitmap(BitmapFromString(129, 29, 'meJzt2jERgDAABMF4iYGUGMAAJf6FJBWDg21u5x1c+3Nds+ndz9vUvgQjQgm4EnAl4ErAlYArAVcCrgRcCbgScCXgSsCVgCsBVwKuBFwJuBJwJeBKwJWAKwFXAq4E3D9BU+Nfyna2Abq6x6g='));
  Self.Bitmaps[ERSXPBarSize.LARGE]  := GetMufasaBitmap(BitmapFromString(140, 29, 'meJzt2qERgDAABEF6SQNIGkgDSPovJI5B4nJid76Dsz/Oa1h+834su7fRQZJGfRr1adSnUZ9GfRr1adSnUZ9GfRr1adSnUZ9GfRr1adSnUZ9GfRr1adSnUZ9GfRr1adSnUd+3kWW3/cZsf7YAmM7oUA=='));

  AddOnTerminate(@Self.FreeBitmaps);
end;

function TRSXPBar.Bounds: TBox; override;
begin
  Result := [Self.Cache.X1.Value, Self.Cache.Y1.Value, Self.Cache.X2.Value, Self.Cache.Y2.Value];
end;

function TRSXPBar.IsOpen: Boolean;

  function FindBorder(Size: ERSXPBarSize; Area: TBox): Boolean;
  var
    X, Y: Integer;
  begin
    if FindBitmapToleranceIn(Self.Bitmaps[Size].GetIndex(), X, Y, Area, 5) then
    begin
      Self.Cache.X1.Value := X;
      Self.Cache.Y1.Value := Y;
      Self.Cache.X2.Value := X + Self.Bitmaps[Size].GetWidth()-1;
      Self.Cache.Y2.Value := Y + Self.Bitmaps[Size].GetHeight()-1;

      Exit(True);
    end;
  end;

  function UpdateLocation: Boolean;
  var
    Size: ERSXPBarSize;
  begin
    for Size in ERSXPBarSize do
      if FindBorder(Size, [MainScreen.X1, 0, MainScreen.X2, 100]) then // Can only currently be at top of mainscreen
      begin
        case Size of
          ERSXPBarSize.SMALL:  Self.Font := RS_FONT_PLAIN_11;
          ERSXPBarSize.MEDIUM: Self.Font := RS_FONT_PLAIN_12;
          ERSXPBarSize.LARGE:  Self.Font := RS_FONT_BOLD_12;
        end;

        Self.Size := Size;

        Exit(True);
      end;
  end;

begin
  Result := FindBorder(Self.Size, Self.Bounds) or UpdateLocation();
end;

function TRSXPBar.Open: Boolean;
begin
  if Self.IsOpen() then
    Exit(True);

  Mouse.Click(Minimap.GetXPCircle(), MOUSE_LEFT);

  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(100, 1000), 3000);
end;

procedure TRSXPBar.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;
end;

function TRSXPBar.Read: Int32;
begin
  Result := -1;
  if Self.IsOpen() then
    Result := OCR.RecognizeNumber(Self.Bounds, TOCRColorFilter.Create([Self.COLOR_TEXT_WHITE]), Self.Font);
end;

var
  XPBar: TRSXPBar;

begin
  XPBar.Setup('XPBar', [@XPBar.SetupAlignment, @XPBar.Draw]);
  XPBar.LoadBitmaps();
end;
