{$DEFINE SRL_GAMETABS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSGameTabs = record(TRSInterface)
    Cache: record
      ClientWidth, ClientHeight: Integer;
      ClientMode: ERSClientMode;

      Bounds: TBox;
      TabBoxes: TBoxArray;
    end;
  end;

  ERSGameTab = (
    COMBAT, STATS, QUESTS, INVENTORY, EQUIPMENT,  PRAYER, MAGIC,
    CLAN, FRIENDS, ACCOUNT, LOGOUT, OPTIONS, EMOTES, MUSIC,
    UNKNOWN
  );

function TRSGameTabs.CustomBoundsFinder(ClientMode: ERSClientMode): TBox;
var
  ClientWidth, ClientHeight, I: Integer;
  Boxes: TBoxArray;
begin
  GetClientDimensions(ClientWidth, ClientHeight);
  if (Self.Cache.ClientWidth = ClientWidth) and (Self.Cache.ClientHeight = ClientHeight) and (Self.Cache.ClientMode = ClientMode) then
    Exit(Self.Cache.Bounds);

  case ClientMode of
    ERSClientMode.FIXED:
      begin
        Result.X1 := RootInterface.X2 - 242;
        Result.X2 := RootInterface.X2 - 2;
        Result.Y1 := RootInterface.Y2 - 334;
        Result.Y2 := RootInterface.Y2;

        Boxes := Grid(7, 2, 30, 33, [3, 265], [Result.X1 + 6, Result.Y1 + 1]);
      end;

    ERSClientMode.RESIZABLE_CLASSIC:
      begin
        Result.X1 := RootInterface.X2 - 240;
        Result.X2 := RootInterface.X2;
        Result.Y1 := RootInterface.Y2 - 334;
        Result.Y2 := RootInterface.Y2;

        Boxes := Grid(7, 2, 30, 33, [3, 265], [Result.X1 + 6, Result.Y1 + 1]);
      end;

    ERSClientMode.RESIZABLE_MODERN:
      begin
        Result.X1 := RootInterface.X2 - 230;
        Result.X2 := RootInterface.X2;
        Result.Y1 := RootInterface.Y2 - 346;
        Result.Y2 := RootInterface.Y2;

        // Single row, else two rows
        if (RootInterface.Width >= 948) then
        begin
          Result.X1 -= 198;
          Result.Y1 += 36;

          Boxes := Grid(14, 1, 30, 33, [3, 0], [Result.X1, Result.Y2 - 35]);
          for I := Ord(ERSGameTab.MUSIC) downto Ord(ERSGameTab.CLAN) do
            Boxes[I] := Boxes[I - 1];
        end else
          Boxes := Grid(7, 2, 30, 33, [3, 3], [Result.X1, Result.Y2 - 70]);

        // rearrange to match ERSGameTab layout
        Sort(Boxes, [0,1,2,3,4,5,6,10,8,9,7,11,12,13], True);

        // Set logout as top right corner
        Boxes[ERSGameTab.LOGOUT] := [RootInterface.X2 - 19, RootInterface.Y1 + 9, RootInterface.X2 - 10, RootInterface.Y1 + 18];
      end;
  end;

  Self.Cache := [ClientWidth, ClientHeight, ClientMode, Result, Boxes];
end;

function TRSGameTabs.GetTabBoxes: TBoxArray;
begin
  Self.Bounds(); // above

  Result := Self.Cache.TabBoxes;
end;

function TRSGameTabs.GetTabBox(Tab: ERSGameTab): TBox;
begin
  Result := Self.GetTabBoxes[Tab];
end;

function TRSGameTabs.GetCurrentTab: ERSGametab;
var
  Tabs: TBoxArray;
  I: Int32;
begin
  Tabs := Self.GetTabBoxes();

  if (RSClient.ClientMode = ERSClientMode.RESIZABLE_MODERN) and (SRL.CountColor(8639715, Tabs[ERSGameTab.LOGOUT]) > 0) then
    Exit(ERSGameTab.LOGOUT);

  for I := 0 to High(Tabs) do
    if (SRL.CountColor(CTS1(1778534, 22), Tabs[I]) > 50) then
      Exit(ERSGameTab(I));
      
  Exit(ERSGameTab.UNKNOWN);
end;

function TRSGameTabs.Open(Tab: ERSGameTab): Boolean;
begin
  if GetCurrentTab() = Tab then
    Exit(True);

  for 1 to 3 do
  begin
    Mouse.Click(GetTabBox(Tab), MOUSE_LEFT, SRL.Dice(50));

    Result := WaitUntil(Self.GetCurrentTab() = Tab, SRL.TruncatedGauss(50, 2000), SRL.TruncatedGauss(2000, 3000));
    if Result then
      Exit;
  end;
end;

procedure TRSGameTabs.Draw(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Bitmap.DrawBoxes(GetTabBoxes(), False, $00FFFF);
end;

procedure TRSGameTabs.Setup(Name: String); override;
begin
  inherited;

  Self.BoundsFinder.CustomFunction  := @Self.CustomBoundsFinder;
end;

var
  GameTabs: TRSGameTabs;

begin
  GameTabs.Setup('GameTabs');
end;

