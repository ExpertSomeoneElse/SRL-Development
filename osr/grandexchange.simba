{$DEFINE SRL_GRANDEXCHANGE_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSGEInterface = (
    UNKNOWN,
    OVERVIEW,
    OFFER_STATUS,
    OFFER_SETUP,
    HISTORY
  );

  TRSGrandExchange = type TRSInterface;

{$i elements/grandexchange.elements}

function TRSGrandExchange.GetCurrentInterface: ERSGEInterface;
begin
  if Self.IsTitle('Set up offer')   then Exit(ERSGEInterface.OFFER_SETUP);
  if Self.IsTitle('Offer status')   then Exit(ERSGEInterface.OFFER_STATUS);
  if Self.IsTitle('Grand Exchange') then Exit(ERSGEInterface.OVERVIEW);
  if Self.IsTitle('Trade History')  then Exit(ERSGEInterface.HISTORY);
end;

function TRSGrandExchange.IsSearching: Boolean;
var
  B: TBox;
begin
  Result := OCR.LocateText(Chat.Bounds, 'What would you like to buy', RS_FONT_BOLD_12, TOCRColorFilter.Create([0]), B) = 1;
end;

function TRSGrandExchange.CurrentSearch: String;
begin
  Result := OCR.Recognize(Chat.Bounds, TOCRColorFilter.Create([8388608]), RS_FONT_BOLD_12).TrimRight(['*']);
end;

function TRSGrandExchange.FindSearchItem(Item: String; out B: TBox): Boolean;
begin
  if (Item = '') then
    Exit;

  Result := OCR.LocateText(Chat.Bounds, Item, RS_FONT_PLAIN_12, TOCRColorFilter.Create([0]), B) = 1;
end;

type
  TRSGEHistoryItem = record
    Name: String;
    Quantity: Int32;
    PricePerItem: Int32;
    TotalPrice: Int32;
    Bounds: TBox;
  end;
  TRSGEHistory = array of TRSGEHistoryItem;

function TRSGrandExchange.GetHistory: TRSGEHistory;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  I: Integer;
  Rows, Columns: TBoxArray;
  Item: TRSGEHistoryItem;
begin
  SRL.FindColors(TPA, [2070783, 4176127], Self.Bounds.Expand(-30));

  ATPA := TPA.Cluster(200, 5);
  SetLength(Rows, Length(ATPA));
  for I := 0 to High(Rows) do
  begin
    Rows[I] := ATPA[I].Bounds.Expand(30, 15);
    Rows[I].X1 := Self.Bounds.X1 + 45;
    Rows[I].X2 := Self.Bounds.X2 - 30;
  end;

  Rows.SortByY();

  for I := 0 to High(Rows) do
  begin
    Columns := Rows[I].Partition(1, 2);

    Item.Bounds := Rows[I];
    Item.Name := OCR.Recognize(Columns[0], TOCRColorFilter.Create([4176127, $FFFFFF]), RS_FONT_PLAIN_12);
    if (Item.Name = '') Then
      Continue;

    Item.Quantity := SRL.GetItemAmount(Columns[1]);
    if (Item.Quantity = 0) Then
      Item.Quantity := 1;

    Item.TotalPrice := OCR.RecognizeNumber(Columns[1], TOCRColorFilter.Create([4176127]), RS_FONT_PLAIN_11);
    Item.PricePerItem := Item.TotalPrice div Item.Quantity;

    Result := Result + Item;
  end;
end;

function TRSGrandExchange.GetProgress(B: TBox): Int32;

  function Calc(B: TBox): Integer;
  var
    TPA: TPointArray;
  begin
    if SRL.CountColor(110, B) > 0 then
      Result := -1
    else
    if SRL.FindColors(TPA, [18688, 1598375], B) then
      Result := Round(TPA.Bounds.Width() / (B.Width - 2) * 100);
  end;

var
  TPA: TPointArray;
begin
  SRL.FindColors(TPA, 0, B);

  for TPA in TPA.Cluster(1) do
    if (TPA.Bounds.Width() > 50) and TPA.IsBox() then
    begin
      Result := Calc(TPA.Bounds);
      Exit;
    end;
end;

type
  ERSGEOfferType = (EMPTY, BUY, SELL);

  TRSGEOfferStatus = record
    OfferType: ERSGEOfferType;
    Item: String;
    Quantity: Int32;
    PricePerItem: Int32;
    TotalPrice: Int32;
    Progress: Int32;
    GuidePrice: Int32;
  end;

function TRSGrandExchange.GetOfferStatus(Slot: Integer): TRSGEOfferStatus;
var
  B: TBox;
  Element: ERSGrandExchangeElement;
begin
  Element := ERSGrandExchangeElement.OFFER_1 + Slot;
  if not (Element in [ERSGrandExchangeElement.OFFER_1..ERSGrandExchangeElement.OFFER_8]) then
    Self.Fatal('Invalid element');

  B := Self.ElementBounds(Element);

  case OCR.Recognize(B, TOCRColorFilter.Create([2004990]), RS_FONT_BOLD_12) of
    'Empty': Result.OfferType := ERSGEOfferType.EMPTY;
    'Buy':   Result.OfferType := ERSGEOfferType.BUY;
    'Sell':  Result.OfferType := ERSGEOfferType.SELL;
  end;

  if (Result.OfferType = ERSGEOfferType.EMPTY) then
    Exit;

  Result.Item := OCR.RecognizeLines(B, TOCRColorFilter.Create([4110334]), RS_FONT_PLAIN_11).Merge(' ');
  Result.PricePerItem := OCR.RecognizeNumber(B, TOCRColorFilter.Create([2004990]), RS_FONT_PLAIN_11);
  Result.Quantity := SRL.GetItemAmount(B);
  Result.TotalPrice := Result.Quantity * Result.PricePerItem;
  Result.Progress := Self.GetProgress(B);
  Result.GuidePrice := Self.ElementRecognizeNumber(ERSGrandExchangeElement.GUIDE_PRICE, [4176127], RS_FONT_PLAIN_11);
end;

function TRSGrandExchange.GetCurrentOfferStatus: TRSGEOfferStatus;
begin
  case Self.ElementRecognizeText(ERSGrandExchangeElement.OFFER_TYPE, [2070783], RS_FONT_BOLD_12) of
    'Buy offer':   Result.OfferType := ERSGEOfferType.BUY;
    'Sell offer':  Result.OfferType := ERSGEOfferType.SELL;
  end;

  Result.Item := Self.ElementRecognizeText(ERSGrandExchangeElement.ITEM_NAME, [2070783], RS_FONT_BOLD_12);
  Result.Quantity := Self.ElementRecognizeNumber(ERSGrandExchangeElement.QUANTITY, [4176127], RS_FONT_PLAIN_11);
  Result.Progress := Self.GetProgress(Self.ElementBounds(ERSGrandExchangeElement.PROGRESS));
  Result.PricePerItem := Self.ElementRecognizeNumber(ERSGrandExchangeElement.PRICE_PER_ITEM, [4176127], RS_FONT_PLAIN_11);
  Result.TotalPrice := Result.Quantity * Result.PricePerItem;
  Result.GuidePrice := Self.ElementRecognizeNumber(ERSGrandExchangeElement.GUIDE_PRICE, [4176127], RS_FONT_PLAIN_11);
end;

function TRSGrandExchange.IsOpen: Boolean;
begin
  Result := Self.GetCurrentInterface() <> ERSGEInterface.UNKNOWN;
end;

procedure TRSGrandExchange.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;
end;

procedure TRSGrandExchange.Setup(Name: String); override;
begin
  inherited;

  with Self.BoundsFinder.Alignments[ERSClientMode.FIXED] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1];
    Bottom := [@InterfaceArea.Y2];
    Center := [484, 304];
  end;

  with Self.BoundsFinder.Alignments[ERSClientMode.RESIZABLE_CLASSIC] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1, -1];
    Bottom := [@InterfaceArea.Y2];
    Center := [484, 304];
  end;

  // Same as above
  with Self.BoundsFinder.Alignments[ERSClientMode.RESIZABLE_MODERN] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1, -1];
    Bottom := [@InterfaceArea.Y2];
    Center := [484, 304];
  end;
end;

var
  GrandExchange: TRSGrandExchange;

begin
  GrandExchange.Setup('Grand Exchange');
end;

(*
BankScreen.Open
~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.Open(Location: ERSBankLocation): Boolean; override;

Overrides **BankScreen.Open** to support opening the grand exchange.
*)
{
function TRSBank.Open(Location: ERSBankLocation): Boolean; override;
begin
  if (Location = ERSBankLocation.GRAND_EXCHANGE) then
    Result := GrandExchange.OpenBank()
  else
    Result := inherited();
end;
}
