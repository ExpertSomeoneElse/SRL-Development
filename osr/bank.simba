(*
Bank
====
Methods to interact with the Bank.
*)

{$DEFINE SRL_BANK_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

const
  BANK_DEPOSIT_ALL          = -1;
  
  BANK_WITHDRAW_ALL         = -1;
  BANK_WITHDRAW_ALL_BUT_ONE = -2;
  
type
  ERSBankLocation = (
    CASTLE_WARS,
    FEROX,
    GRAND_EXCHANGE,
    FALADOR_EAST
  );

  TRSBankWithdrawItem = record
    Item: TRSItem;
    Quantity: Int32;
    Noted: Boolean;
  end;
  
  TRSBankWithdrawSlot = record
    Slot: Int32;
    Quantity: Int32;
    Noted: Boolean;
  end;
  
  TRSBankDepositItem = record
    Item: TRSItem;
    Quantity: Int32;
  end;
  
  TRSBankDepositSlot = record
    Slot: Int32;
    Quantity: Int32;
  end;
  
  TRSBank = record(TRSInterface)
    FINDER_UPTEXT: TStringArray;
    FINDER_OPTION: TStringArray;
  end;

{$i elements/bank.elements}

function TRSBank.GetItemArea: TBox;
begin
  Result := Self.Bounds;
  Result.X1 += 57;
  Result.Y1 += 77;
  Result.X2 -= 62;
  Result.Y2 -= 43;
end;

function TRSBank.GetSlotBoxes: TBoxArray; 
begin
  with Self.GetItemArea() do
    Result := Grid(8, Height() div 35, 31, 31, [17, 5], [X1, Y1]);
end;

function TRSBank.GetTabBoxes: TBoxArray;
begin
  Result := Grid(10, 1, 36, 30, [4, 0], [Self.X1 + 46, Self.Y1 + 42]);
end;

function TRSBank.GetTabBox(Tab: Int32): TBox;
var
  Tabs: TBoxArray := Self.GetTabBoxes();
begin
  if (Tab >= 0) and (Tab <= Length(Tabs)) then
    Result := Tabs[Tab];
end;

function TRSBank.HasItems: Boolean;
begin
  Result := SRL.CountColor(RS_ITEM_BORDER, Self.GetItemArea()) > 0;
end;

(*
Bank.IsOpen
~~~~~~~~~~~
.. pascal:: function TRSBank.IsOpen(WaitForItems: Boolean = True): Boolean;

Returns true if the Bank is visible.

**WaitForItems** determines if the method should wait up to one second for items to to appear.
There can be a small delay before items are visible.
*)
function TRSBank._IsOpen: Boolean; overload;
begin
  Result := Self.ElementFindText(ERSBankElement.SWAP, [COLOR_TEXT_ORANGE, COLOR_TEXT_WHITE], 'Swap', RS_FONT_PLAIN_12);

  {
  if Result and WaitForItems then
    WaitUntil(Self.HasItems(), 80, Random(800, 1200));  }
end;

(*
Bank.Close
~~~~~~~~~~
.. pascal:: function TRSBank.Close(PressEscape: Boolean = False): Boolean;

Closes the bank, Depending on `PressEscape` the function will either click the button
or press backspace.

Example
-------

 WriteLn Bank.Close();
*)
{
function TRSBank.Close(PressEscape: Boolean = False): Boolean; 
begin
  if not Self.IsOpen(False) then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(False), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;
}

procedure TRSBank.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen then
    Exit;

  inherited;

  //Bitmap.DrawButtons(Self.GetButtons());
  Bitmap.DrawBoxes(Self.GetTabBoxes(), $00FFFF);
  Bitmap.DrawBoxes(Self.GetSlotBoxes(), $00FFFF);
end;

function TRSBank.FindItemBoundaries: TBoxArray;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  Area, B: TBox;
begin
  Area := Self.GetItemArea();

  if SRL.FindColors(TPA, RS_ITEM_BORDER, Area) > 0 then
  begin
    ATPA := TPA.Cluster(50, 3);

    for B in ATPA.ToTBA() do
    begin
      if B.Height() <= 5 then
        Continue;

      Result += Grid(8, 1, 32, B.Height(), [16], [Area.X1, B.Y1 - 1]);
    end;
  end;
end;

procedure TRSBank.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -1];
        Self.Alignment.Center.MaxWidth := 488;
        Self.Alignment.Center.MaxHeight := 800;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -2];
        Self.Alignment.Center.MaxWidth := 488;
        Self.Alignment.Center.MaxHeight := 800;
      end;
  end;
end;

function TRSBank.IsSearching: Boolean;
begin
  Result := Self.IsTitle('Showing items');
end;

function TRSBank.HasSearchQuery: Boolean;
begin
  Result := 'Show items' in Chat.GetQuery(); // todo method?
end;

function TRSBank.OpenSearchQuery: Boolean;
begin
  if Self.HasSearchQuery() then
    Exit(True);

  if Self.IsSearching() then
  begin
    Self.ElementClick(ERSBankElement.SEARCH);

    Wait(0, 1500, wdLeft);
  end;

  Self.ElementClick(ERSBankElement.SEARCH);
end;

function TRSBank.CloseSearch: Boolean;
begin
  if not Self.IsSearching() then
    Exit(True);

  Self.ElementClick(ERSBankElement.SEARCH);

  Result := WaitUntil(not Self.IsSearching(), 100, SRL.TruncatedGauss(1000, 2000));
end;

(*
Bank.Search
~~~~~~~~~~~
.. pascal:: function TRSBank.Search(Item: String): Boolean;

Searches for an item.

Example
-------

  Bank.Search('logs'); // Search for logs
*)
function TRSBank.Search(Item: String): Boolean; 
begin
  if Self.IsTitle('Showing items: ' + LowerCase(Item)) then
    Exit(True);

  Result := Self.OpenSearchQuery() and Chat.AnswerQuery('Show items', Item, Random(2000, 2500)) and
            Self.IsTitle('Showing items: ' + LowerCase(Item), Random(2000, 2500));
end;

function TRSBank.Open(P: TPoint): Boolean;
begin
  Mouse.Move(P);

  Result := ChooseOption.IsOpen() and ChooseOption.Select(Self.FINDER_OPTION);

  if not Result then
  begin
    if MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    begin
      if ('Banker' in MainScreen.GetUpText()) or SRL.Dice(10) then
        Result := ChooseOption.Select(Self.FINDER_OPTION)
      else
      begin
        Mouse.Click(MOUSE_LEFT);

        Result := MainScreen.DidRedClick();
      end;
    end;
  end;

  if Result then
  begin
    if Minimap.HasFlag(Random(200, 400)) then
      Minimap.WaitFlag();

    Result := Self.IsOpen(Random(3000, 4000));
  end;
end;

function TRSBank._FindFaladorEast: T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.Colors += CTS2(4086642, 5, 0.08, 0.55);
  Finder.ClusterDistance := 15;
  Finder.Erode := 2;
  Finder.Grow := 3;

  Result := MainScreen.FindObject(Finder);
  if Length(Result) = 0 then
    Exit;

  Result.SortByLongSide();
  Result := Result[0].Cluster(5);
  Result.SortByMiddle(Result.Merge.Mean());
end;

function TRSBank._FindCastleWars: T2DPointArray;
var
  TPA, ChestTPA: TPointArray;
  ATPA: T2DPointArray;
  I: Int32;
begin
  if SRL.FindColors(TPA, CTS2(5526875, 35, 0.19, 0.06), MainScreen.Bounds) > 0 then
  begin
    ATPA := TPA.Cluster(1);

    for I := 0 to High(ATPA) do
      if SRL.FindColors(TPA, CTS2(2503237, 40, 0.10, 0.14), ATPA[I].Bounds) > 5 then
      begin
        TPA := ATPA[I].MinAreaRect.Filter(TPA);
        TPA := TPA.Erode(MainScreen.ConvertDistance(3));
        if Length(TPA) > 0 then
          ChestTPA += TPA;
      end;

    Result := ChestTPA.Cluster(2);
  end;
end;

function TRSBank._FindFerox: T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.Colors += CTS2(931652, 12, 0.07, 0.89);
  Finder.ClusterDistance := 1;
  Finder.Erode := 1;

  Result := MainScreen.FindObject(Finder);
end;

function TRSBank._FindWintertodt: T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.ColorClusters += [
    CTS2(3289384, 4, 0.51, 0.37),  //Dark hole
    CTS2(13025214, 17, 0.13, 0.11), //Snow color
    10
  ];

  Finder.ClusterDistance := 2;
  Finder.Grow := 3;
  Finder.Erode := 2;

  Result := MainScreen.FindObject(Finder);
  if Length(Result) = 0 then
    Exit;
  Result.SortByLongSide();
  Result := Result[0].Cluster(3);
  Result.SortByMiddle(Result.Merge.Mean());
end;


function TRSBank.Open(Location: ERSBankLocation): Boolean; overload;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
begin
  if Self.IsOpen() or Self.Open(Mouse.Position()) then
    Exit(True);
    
  case Location of
    ERSBankLocation.FALADOR_EAST:   ATPA := Self._FindFaladorEast();
    ERSBankLocation.CASTLE_WARS:    ATPA := Self._FindCastleWars();
    ERSBankLocation.FEROX:          ATPA := Self._FindFerox();
  end;

  ATPA.SortBySize();
  if Length(ATPA) > 3 then
    SetLength(ATPA, 3);

  for TPA in ATPA do
  begin
    P := TPA[Random(Length(TPA))];
    P.X += Random(-2, 2);
    P.Y += Random(-2, 2);

    if Self.Open(P) then
      Exit(True);
  end;
end;

function TRSBank.Hover(Location: ERSBankLocation; HoverOption: Boolean): Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
begin
  if ChooseOption.IsOpen() or MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    Exit(True);

  case Location of
    ERSBankLocation.FALADOR_EAST:   ATPA := Self._FindFaladorEast();
    ERSBankLocation.CASTLE_WARS:    ATPA := Self._FindCastleWars();
    ERSBankLocation.FEROX:          ATPA := Self._FindFerox();
  end;

  ATPA.SortBySize();
  if Length(ATPA) > 3 then
    SetLength(ATPA, 3);

  for TPA in ATPA do
  begin
    P := TPA[Random(Length(TPA))];
    P.X += Random(-2, 2);
    P.Y += Random(-2, 2);

    Mouse.Move(P);
    if MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    begin
      if HoverOption then
        ChooseOption.Hover(['Use Bank', 'Bank Bank']);

      Exit(True);
    end;
  end;
end;

function TRSBank.IsCustomQuantity(Quantity: Int32): Boolean;
begin
  Result := not (Quantity in [1,5,10,BANK_DEPOSIT_ALL]);
end;

function TRSBank.DepositHelper(B: TBox; Amount: Int32; UseQuantityButtons: Boolean): Boolean;
var
  Element: ERSBankElement;
begin
  if UseQuantityButtons then
  begin
    if Self.IsCustomQuantity(Amount) then
    begin
      if Self.ElementToggle(ERSBankElement.QUANTITY_X, Self.COLOR_BUTTON_RED, 5, 5) then
      begin
        Mouse.Move(B);
      
        if MainScreen.IsUpText('Deposit-' + ToString(Amount)) then
        begin
          Mouse.Click(MOUSE_LEFT);
          
          Result := True;
        end else
          Result := ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
      end;
    end else
    begin
      case Amount of
        1:  Element := ERSBankElement.QUANTITY_1;
        5:  Element := ERSBankElement.QUANTITY_5;
        10: Element := ERSBankElement.QUANTITY_10;
        else 
          Element := ERSBankElement.QUANTITY_ALL;
      end;

      Result := Self.ElementToggle(Element, Self.COLOR_BUTTON_RED, 5, 5);
      if Result then
        Mouse.Click(B, MOUSE_LEFT);
    end;
  end else
  begin
    Mouse.Move(B);

    if (Amount = BANK_DEPOSIT_ALL) then
      Result := ChooseOption.Select('Deposit-All')
    else
      Result := ChooseOption.Select('Deposit-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False) or
                ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
  end;
end;  
  
function TRSBank.WithdrawHelper(B: TBox; Amount: Int32; Noted: Boolean; UseQuantityButtons: Boolean): Boolean;
var
  Element: ERSBankElement;
begin
  if Noted then
    Element := ERSBankElement.NOTE
  else
    Element := ERSBankElement.ITEM;

  if Self.ElementToggle(Element, Self.COLOR_BUTTON_RED, 5, 5) then
  begin
    if UseQuantityButtons then
    begin
      if Self.IsCustomQuantity(Amount) then
      begin
        if Self.ElementToggle(ERSBankElement.QUANTITY_X, Self.COLOR_BUTTON_RED, 0, 5) then
        begin
          Mouse.Move(B);

          if MainScreen.IsUpText('Withdraw-' + ToString(Amount)) then
          begin
            Mouse.Click(MOUSE_LEFT);

            Result := True;
          end else
            Result := ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
        end;
      end else
      begin
        case Amount of
          1:  Element := ERSBankElement.QUANTITY_1;
          5:  Element := ERSBankElement.QUANTITY_5;
          10: Element := ERSBankElement.QUANTITY_10;
          else
            Element := ERSBankElement.QUANTITY_ALL;
        end;

        Result := Self.ElementToggle(Element, Self.COLOR_BUTTON_RED, 5, 5);
        if Result then
          Mouse.Click(B, MOUSE_LEFT);
      end;
    end else
    begin
      Mouse.Move(B);

      case Amount of
        BANK_WITHDRAW_ALL:
          Result := ChooseOption.Select('Withdraw-All');
        BANK_WITHDRAW_ALL_BUT_ONE:
          Result := ChooseOption.Select('Withdraw-All-but-1');
        else
          Result := ChooseOption.Select('Withdraw-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False) or
                    ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
      end;
    end;
  end;
end;


(*
Bank.CountTabs
~~~~~~~~~~~
.. pascal:: function TRSBank.CountTabs: Int32;

Counts the existing bank tabs.

Example
-------

  WriteLn Bank.CountTabs;
*)
function TRSBank.CountTabs: Int32;
var
  i: Integer;
  TPA: TPointArray;
begin
  Result := 0;

  for i := 9 downto 1 do
    if SRL.FindColors(TPA, CTS0(65536), Self.GetTabBox(i)) > 0 then
      Exit(i);
end;

(*
Bank.GetCurrentTab
~~~~~~~~~~~
.. pascal:: function TRSBank.GetCurrentTab: Int32;

Get the current active bank tab.

Example
-------

  WriteLn Bank.GetCurrentTab;
*)
function TRSBank.GetCurrentTab: Int32;
var
  Tabs: TBoxArray := Self.GetTabBoxes;
  Tab: TBox;
  i: Int32;
begin
  for i := 0 to High(Tabs) do // todo: use title
  begin
    Tab := Tabs[i];
    Tab.Y2 +=1;
    if SRL.CountColor(CTS1(5334129, 0), Tab) = 0 then
      Exit(i);
  end;
end;

(*
Bank.OpenTab
~~~~~~~~~~~
.. pascal:: function TRSBank.OpenTab(Tab: Int32): Boolean;

Open the specified bank tab.

Example
-------

  Bank.OpenTab(0);
*)
function TRSBank.OpenTab(Tab: Int32): Boolean;
var
  TabBox: TBox;
begin
  if not Self.IsOpen then
    Exit;

  if Tab = Self.GetCurrentTab then
    Exit(True);

  TabBox := Self.GetTabBox(Tab);
  if TabBox <> [] then
  begin
    Mouse.Click(TabBox, MOUSE_LEFT);
    Result := WaitUntil((Tab = Self.GetCurrentTab), 100, 2000);
  end;
end;

(*
Bank.WithdrawItem
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBank.WithdrawItem(Item: TRSBankWithdrawItem; UseQuantityButtons: Boolean): Boolean;

Finds and withdraws an item.

Parameters
----------

Item
	TRSBankWithdrawItem variable to withdraw.

UseQuantityButtons  
  Determines if to use the 1,5,10,X,ALL `Quantity` buttons.

Example
-------

  var
    ItemToWithdraw: TRSBankWithdrawItem;
    
  ItemToWithdraw.Item := 'Iron full helm'; 
  ItemToWithdraw.Quantity := 5;
  ItemToWithdraw.Noted := False;  
  
  Bank.WithdrawItem(ItemToWithdraw, True);  
  
  // OR you can shorthand by passing an open array.
  
  Bank.WithdrawItem(['Iron full helm', 5, False], True);  
*)
function TRSBank.WithdrawItem(Item: TRSBankWithdrawItem; UseQuantityButtons: Boolean): Boolean; 
var
  B: TBox;
begin
  if Self.FindItem(Item.Item, B) then
    Result := Self.WithdrawHelper(B, Item.Quantity, Item.Noted, UseQuantityButtons); 
end;

function TRSBank.WithdrawSlot(Item: TRSBankWithdrawSlot; UseQuantityButtons: Boolean): Boolean;
begin
  Result := Self.WithdrawHelper(Self.GetSlotBoxes()[Item.Slot], Item.Quantity, Item.Noted, UseQuantityButtons);
end;

function TRSBank.DepositItem(Item: TRSBankDepositItem; UseQuantityButtons: Boolean): Boolean;
var
  B: TBox;
begin
  if Inventory.FindItem(Item.Item, B) then
    Result := Self.DepositHelper(B, Item.Quantity, UseQuantityButtons);
end;

function TRSBank.DepositSlot(Item: TRSBankDepositSlot; UseQuantityButtons: Boolean): Boolean; 
begin
  Result := Self.DepositHelper(Inventory.GetSlotBox(Item.Slot), Item.Quantity, UseQuantityButtons);
end;

(*
Bank.DepositAll
~~~~~~~~~~~~~~~
.. pascal:: function TRSBank.DepositAll: Boolean;

Depositis your inventory by clicking the deposit inventory button
*)
function TRSBank.DepositAll: Boolean;
begin
  if (Inventory.Count() = 0) then
    Exit(True);

  Result := Self.IsOpen();
  if Result then
    Self.ElementClick(ERSBankElement.DEPOSIT_INVENTORY);
end;

(*
var Bank
~~~~~~~~
  Global Bank variable.
*)
var
  Bank: TRSBank;

begin
  Bank.Setup('Bank', [@Bank.SetupAlignment, @Bank.Draw, @Bank._IsOpen]);
  Bank.OnGetItemBoxes := @Bank.FindItemBoundaries;

  Bank.FINDER_UPTEXT := ['Use Bank', 'Bank chest', 'Bank Bank', 'Bank booth', 'Banker'];
  Bank.FINDER_OPTION := ['Use Bank', 'Bank Bank'];
end;

(*
GameTabs.Open
~~~~~~~~~~~~~
.. pascal:: function TRSGameTabs.GetCurrentTab: ERSGametab; override;

Overrides **GameTabs.GetCurrentTab** to return the inventory tab if bank is open.
*)
function TRSGameTabs.GetCurrentTab: ERSGametab; override;
begin
  Result := inherited;

  if (Result = ERSGameTab.UNKNOWN) and Bank.IsOpen then
    Result := ERSGameTab.INVENTORY;
end;

(*
GameTabs.Open
~~~~~~~~~~~~~
.. pascal:: function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;

Overrides **GameTabs.Open** to close the bank if the bank open.
*)
{
function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;
begin
  if Bank.IsOpen(False) then
  begin
    if (Tab = ERSGameTab.INVENTORY) then
      Exit(True);

    Bank.Close();
  end;

  Result := inherited();
end;  }

