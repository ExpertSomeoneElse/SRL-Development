(*
Misc
====
*)

{$DEFINE SRL_MISC_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

(*
SRL.GetXPAtLevel
~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.GetXPAtLevel(level:Int32): Int32;

Given a level it returns the minimum XP needed for it.
*)
function TSRL.GetXPAtLevel(level:Int32): Int32; constref;
var
  total:Double;
  i:Int32;
begin
  for i:=1 to level-1 do
    total += Floor(i + 300 * 2 ** (i / 7));
  Result := Floor(total / 4);
end;

(*
SRL.GetLevelAtXP
~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.GetLevelAtXP(XP:UInt32): Int32;

Given some XP, it returns what level that is.
*)
function TSRL.GetLevelAtXP(XP:UInt32): Int32; constref;
var 
  total:Double;
begin
  while (total < XP*4+1) do
  begin  
    Inc(Result);
    total += Floor(Result + 300 * 2 ** (Result / 7));
  end;
end;

(*
SRL.GetItemAmount
~~~~~~~~~~~~~~~~~
.. pascal:: function TSRL.GetItemAmount(constref Area: TBox): Int32;

For use with items in like bankscreen, inventory, shops and so on to
get the number of stacked items there are.
*)
function TSRL.GetItemAmount(Area: TBox): Int32; constref;
const
  Colors: TIntegerArray = [RSColors.ITEM_TEXT_YELLOW, RSColors.ITEM_TEXT_WHITE, RSColors.ITEM_TEXT_GREEN];
  Multiplers: TIntegerArray = [1, 1000, 1000000];
var
  I: Integer;
begin
  for I := 0 to High(Colors) do
    if SRL.CountColor(CTS1(Colors[I], 5), Area) > 0 then
    begin
      Result := OCR.RecognizeNumber(Area, TOCRColorFilter.Create([Colors[I]], [5]), RS_FONT_PLAIN_11) * Multiplers[I];
      Exit;
    end;
end;

function TSRL.FormatNumber(n:Extended; dec:Byte = 3): String; constref;
var
  i: Int32;
  f: Extended := n;
begin
  while (Abs(f) >= 1000) do
  begin
    Inc(i);
    f := f / 1000;
  end;

  Result := FloatToStr(Round(f,dec)) + (['','K','M','B','T'])[i]
end;



