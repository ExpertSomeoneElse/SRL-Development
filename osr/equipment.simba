{$DEFINE SRL_STATS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type  
  TRSEquipment = type TRSGameTab;

{$i elements/equipment.elements}

function TRSEquipment.GetItemBoxes: TBoxArray;
var
  Element: ERSEquipmentElement;
begin
  for Element in [ERSEquipmentElement.HELM..ERSEquipmentElement.RING] do
    Result += Self.ElementBounds(Element);
end;

function TRSEquipment.IsSlotUsed(B: TBox): Boolean; overload;
begin
  // black with tolerance for when item is transparent
  Result := SRL.CountColor(CTS1(1118740, 35), B) > 0;
end;

function TRSEquipment.IsSlotUsed(Slot: ERSEquipmentElement): Boolean; overload;
begin
  Result := Self.Open and Self.IsSlotUsed(Self.ElementBounds(Slot));
end;

function TRSEquipment.CountGear: Int32;
var
  Element: ERSEquipmentElement;
begin
  for Element in [ERSEquipmentElement.HELM..ERSEquipmentElement.RING] do
    if Self.IsSlotUsed(Element) then
      Result += 1;
end;

var
  Equipment: TRSEquipment;

begin
  Equipment.Setup('Equipment', [@Equipment.SetupAlignment, @Equipment.Draw, @Equipment._IsOpen]);
  Equipment.ID := ERSGameTab.EQUIPMENT;
  Equipment.OnGetItemBoxes := @Equipment.GetItemBoxes;
end;
