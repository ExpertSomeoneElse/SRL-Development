procedure TIntegerArray.Insert(Value: Integer; Index: Integer);
begin
  System.Insert(Value, Self, Index);
end;

procedure TIntegerArray.Delete(Index: Integer; Count: Integer = 1);
begin
  System.Delete(Self, Index, Count);
end;

function TIntegerArray.IndexOf(Value: Integer): Integer; constref;
begin
  Result := System.IndexOf(Value, Self);
end;

function TIntegerArray.IndicesOf(Value: Integer): TIntegerArray; constref;
begin
  Result := System.IndicesOf(Value, Self);
end;

function TIntegerArray.Contains(Value: Integer): Boolean; constref;
begin
  Result := System.Contains(Value, Self);
end;

function TIntegerArray.Remove(Value: Integer): Boolean;
begin
  Result := System.Remove(Value, Self);
end;

procedure TIntegerArray.Reverse; constref;
begin
  System.Reverse(Self);
end;

function TIntegerArray.Reversed: TIntegerArray; constref;
begin
  Result := System.Reversed(Self);
end;

procedure TIntegerArray.Sort;
begin
  System.Sort(Self);
end;

function TIntegerArray.Sorted: TIntegerArray; constref;
begin
  Result := System.Sorted(Self);
end;

function TIntegerArray.Unique: TIntegerArray; constref;
begin
  Result := System.Unique(Self);
end;

function TIntegerArray.Pop: Integer;
var
  H: Integer;
begin
  H := High(Self);
  Result := Self[H];
  SetLength(Self, H);
end;

function TIntegerArray.Sum: Int64; constref;
begin
  Result := System.Sum(Self);
end;

function TIntegerArray.Mean: Double; constref;
begin
  Result := Self.Sum() / Length(self);
end;

function TIntegerArray.Min: Int32; constref;
begin
  Result := MinA(Self);
end;

function TIntegerArray.Max: Int32; constref;
begin
  Result := MaxA(Self);
end;

// ---------------------------------------
// Returns the standard deviation of the array
function TIntegerArray.Stdev: Double;
var
  i: Int32;
  avg: Double;
  square: TExtendedArray;
begin
  avg := Self.Mean();
  SetLength(square,Length(Self));
  for i:=0 to High(self) do
    Square[i] := Sqr(Self[i] - avg);
  //Result := Sqrt(square.Mean());
end;

// ---------------------------------------
// Returns the sample variance.
// Variance is a measure of the variability (spread or dispersion) of the array.
// A large variance indicates that the data is spread out; a small variance
// indicates it is clustered closely around the mean.
function TIntegerArray.Variance: Double;
var
  avg: Double;
  i: Int32;
begin
  avg := Self.Mean();
  for i:=0 to High(Self) do
    Result += Sqr(Self[i] - avg);
  Result := Result / Length(self);
end;

// ----------------------------------------
// Returns the sample mode of the array, which is the most frequently occurring value in the array.
// When there are multiple values occurring equally frequently, mode returns the smallest of those values.
function TIntegerArray.Mode: Int32;
begin
  Result := System.Mode(Self);
end;

function TIntegerArray.UniqueCount: Integer; constref;
begin
  Result := Length(System.Unique(Self));
end;

operator in(Left: Int32; constref Right: TIntegerArray): Boolean;
begin
  Result := Right.Contains(Left);
end;
