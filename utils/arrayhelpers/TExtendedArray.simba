procedure TExtendedArray.Insert(Value: Extended; Index: Integer);
begin
  System.Insert(Value, Self, Index);
end;

procedure TExtendedArray.Delete(Index: Integer; Count: Integer = 1);
begin
  System.Delete(Self, Index, Count);
end;

function TExtendedArray.IndexOf(Value: Extended): Integer; constref;
begin
  Result := System.IndexOf(Value, Self);
end;

function TExtendedArray.IndicesOf(Value: Extended): TIntegerArray; constref;
begin
  Result := System.IndicesOf(Value, Self);
end;

function TExtendedArray.Contains(Value: Extended): Boolean; constref;
begin
  Result := System.Contains(Value, Self);
end;

function TExtendedArray.Remove(Value: Extended): Boolean;
begin
  Result := System.Remove(Value, Self);
end;

procedure TExtendedArray.Reverse; constref;
begin
  System.Reverse(Self);
end;

function TExtendedArray.Reversed: TExtendedArray; constref;
begin
  Result := System.Reversed(Self);
end;

procedure TExtendedArray.Sort; constref;
begin
  System.Sort(Self);
end;

function TExtendedArray.Sorted: TExtendedArray; constref;
begin
  Result := System.Sorted(Self);
end;

function TExtendedArray.Unique: TExtendedArray; constref;
begin
  Result := System.Unique(Self);
end;

function TExtendedArray.Pop: Extended;
var
  H: Integer;
begin
  H := High(Self);
  Result := Self[H];
  SetLength(Self, H);
end;

function TExtendedArray.Sum: Extended; constref;
begin
  Result := System.Sum(Self);
end;

function TExtendedArray.Mean: Extended; constref;
begin
  Result := Self.Sum() / Length(Self);
end;

function TExtendedArray.Min: Extended; constref;
begin
  Result := MinA(Self);
end;

function TExtendedArray.Max: Extended; constref;
begin
  Result := MaxA(Self);
end;

// ---------------------------------------
// Returns the standard deviation of the array
function TExtendedArray.Stdev: Extended;
var
  i: Int32;
  avg: Extended;
  square: TExtendedArray;
begin
  avg := Self.Mean();
  SetLength(square,Length(Self));
  for i:=0 to High(self) do Square[i] := Sqr(Self[i] - avg);
  Result := Sqrt(square.Mean());
end;

// ---------------------------------------
// Returns the sample variance.
// Variance is a measure of the variability (spread or dispersion) of the array.
// A large variance indicates that the data is spread out; a small variance
// indicates it is clustered closely around the mean.
function TExtendedArray.Variance: Extended;
var
  avg: Extended;
  i: Int32;
begin
  avg := Self.Mean();
  for i:=0 to High(Self) do
    Result += Sqr(Self[i] - avg);
  Result := Result / Length(self);
end;

// ----------------------------------------
// Returns the sample mode of the array, which is the most frequently occurring value in the array.
// When there are multiple values occurring equally frequently, mode returns the smallest of those values.
// Takes an extra parameter `Eps`, can be used to allow tolerance in the floating point comparison.
function TExtendedArray.Mode(Eps:Extended=0.00000001): Double;
var
  arr: TExtendedArray;
  i,hits,best: Int32;
  cur: Extended;
begin
  arr := self.Sorted();
  cur := self[0];
  hits := 1;
  best := 0;
  for i:=1 to High(self) do
  begin
    if (self[i]-cur > eps) then
    begin
      if (hits > best) then
      begin
        best := hits;
        Result := cur;
      end;
      hits := 0;
      cur := self[I];
    end;
    Inc(hits);
  end;
  if (hits > best) then
    Result := cur;
end;

operator in(Left: Extended; constref Right: TExtendedArray): Boolean;
begin
  Result := Right.Contains(Left);
end;



