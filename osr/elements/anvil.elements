type
  ERSAnvilElement = (
    QUANTITY_1,
    QUANTITY_2,
    QUANTITY_3,
    QUANTITY_4,
    QUANTITY_5
  );

procedure TRSAnvil.Setup(Name: String); override;
begin
  inherited;

  SetLength(Self.Elements, Length(ERSAnvilElement));

  with Self.Elements[ERSAnvilElement.QUANTITY_1] do
  begin
    Name   := 'quantity_1';
    Anchor := ERSInterfaceElementAnchor.TOP;
    Offset := [453, 36];
    Width  := 37;
    Height := 37;
  end;

  with Self.Elements[ERSAnvilElement.QUANTITY_2] do
  begin
    Name   := 'quantity_2';
    Anchor := ERSInterfaceElementAnchor.TOP;
    Offset := [453, 81];
    Width  := 37;
    Height := 37;
  end;

  with Self.Elements[ERSAnvilElement.QUANTITY_3] do
  begin
    Name   := 'quantity_3';
    Anchor := ERSInterfaceElementAnchor.TOP;
    Offset := [453, 126];
    Width  := 37;
    Height := 37;
  end;

  with Self.Elements[ERSAnvilElement.QUANTITY_4] do
  begin
    Name   := 'quantity_4';
    Anchor := ERSInterfaceElementAnchor.TOP;
    Offset := [453, 171];
    Width  := 37;
    Height := 37;
  end;

  with Self.Elements[ERSAnvilElement.QUANTITY_5] do
  begin
    Name   := 'quantity_5';
    Anchor := ERSInterfaceElementAnchor.TOP;
    Offset := [453, 216];
    Width  := 37;
    Height := 37;
  end;
end;

function TRSAnvil.ElementBounds(constref Element: ERSAnvilElement): TBox;
begin
  Result := Self.ElementFinder.Bounds(Self.Elements[Element]);
end;

procedure TRSAnvil.ElementClick(constref Element: ERSAnvilElement; Button: Integer = MOUSE_LEFT); overload;
begin
  Self.ElementFinder.Click(Self.Elements[Element], Button);
end;

function TRSAnvil.ElementClick(constref Element: ERSAnvilElement; Option: String): Boolean; overload;
begin
  Result := Self.ElementFinder.Click(Self.Elements[Element], Option);
end;

function TRSAnvil.ElementCountColor(constref Element: ERSAnvilElement; Color, Tolerance: Integer): Integer;
begin
  Result := Self.ElementFinder.CountColor(Self.Elements[Element], Color, Tolerance);
end;

function TRSAnvil.ElementFindText(constref Element: ERSAnvilElement; constref Colors: TIntegerArray; constref Text: String; constref Font: TFontSet): Boolean;
begin
  Result := Self.ElementFinder.FindText(Self.Elements[Element], Colors, Text, Font);
end;

function TRSAnvil.ElementRecognizeText(constref Element: ERSAnvilElement; constref Colors: TIntegerArray; constref Font: TFontSet): String;
begin
  Result := Self.ElementFinder.RecognizeText(Self.Elements[Element], Colors, Font);
end;

function TRSAnvil.ElementRecognizeNumber(constref Element: ERSAnvilElement; constref Colors: TIntegerArray; constref Font: TFontSet): Int64;
begin
 Result := Self.ElementFinder.RecognizeNumber(Self.Elements[Element], Colors, Font);
end;

function TRSAnvil.ElementToggle(constref Element: ERSAnvilElement; Color, Tolerance, MinColorCount: Integer): Boolean;
begin
  Result := Self.ElementFinder.Toggle(Self.Elements[Element], Color, Tolerance, MinColorCount);
end;
