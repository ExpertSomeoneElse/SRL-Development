{$DEFINE SRL_DEPOSITBOX_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSDepositBox = type TRSInterface;

  TRSDepositBoxItem = record
  class const
    QUANTITY_ALL = -1;
  var
    Item: TRSItem;
    Quantity: Int32;
  end;

{$i elements/depositbox.elements}

function TRSDepositBox.GetSlotBoxes: TBoxArray;
begin
  Result := Grid(7, 4, 31, 31, [25, 17], [Self.X1 + 38, Self.Y1 + 42]);
end;

function TRSDepositBox.IsOpen: Boolean;
begin
  Result := Self.IsTitle('Deposit Box');
end;

function TRSDepositBox.DepositHelper(B: TBox; Amount: Int32; UseQuantityButtons: Boolean): Boolean;

  // Not a quantity button: 1,5,10,X,All
  function IsCustomQuantity(Quantity: Int32): Boolean;
  begin
    Result := not (Quantity in [1,5,10,TRSDepositBoxItem.QUANTITY_ALL]);
  end;

var
  Element: ERSDepositBoxElement;
begin
  if UseQuantityButtons then
  begin
    if IsCustomQuantity(Amount) then
    begin
      if Self.ElementToggle(ERSDepositBoxElement.QUANTITY_X, RSColors.BUTTON_RED, 5, 5) then
      begin
        Mouse.Move(B);

        if MainScreen.IsUpText('Deposit-' + ToString(Amount)) then
        begin
          Mouse.Click(MOUSE_LEFT);

          Result := True;
        end else
          Result := ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
      end;
    end else
    begin
      case Amount of
        1:  Element := ERSDepositBoxElement.QUANTITY_1;
        5:  Element := ERSDepositBoxElement.QUANTITY_5;
        10: Element := ERSDepositBoxElement.QUANTITY_10;
        else
          Element := ERSDepositBoxElement.QUANTITY_ALL;
      end;

      Result := Self.ElementToggle(Element, RSColors.BUTTON_RED, 5, 5);
      if Result then
        Mouse.Click(B, MOUSE_LEFT);
    end;
  end else
  begin
    Mouse.Move(B);

    if (Amount = TRSDepositBoxItem.QUANTITY_ALL) then
      Result := ChooseOption.Select('Deposit-All')
    else
      Result := ChooseOption.Select('Deposit-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False) or
                ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
  end;
end;

function TRSDepositBox.DepositItem(Item: TRSDepositBoxItem; UseQuantityButtons: Boolean): Boolean;
var
  Box: TBox;
begin
  //if Self.FindItem(Item.Item, Box) then
  //  Result := Self.DepositHelper(Box, Item.Quantity, UseQuantityButtons);
end;

function TRSDepositBox.DepositAll: Boolean;
begin
  if (Inventory.Count() = 0) then
    Exit(True);

  Result := Self.IsOpen();
  if Result then
    Self.ElementClick(ERSDepositBoxElement.DEPOSIT_INVENTORY);
end;

procedure TRSDepositBox.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxes(GetSlotBoxes(), False, $00FFFF);
end;

procedure TRSDepositBox.Setup(Name: String); override;
begin
  inherited;

  with Self.BoundsFinder.Alignments[ERSClientMode.FIXED] do
  begin
    Left   := [@InterfaceArea.X1];
    Right  := [@InterfaceArea.X2];
    Top    := [@InterfaceArea.Y1];
    Bottom := [@InterfaceArea.Y2];

    Center.MaxWidth := 452;
    Center.MaxHeight := 276;
  end;

  with Self.BoundsFinder.Alignments[ERSClientMode.RESIZABLE_CLASSIC] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1, -1];
    Bottom := [@InterfaceArea.Y2];

    Center.MaxWidth := 452;
    Center.MaxHeight := 276;
  end;

  // Same as above
  with Self.BoundsFinder.Alignments[ERSClientMode.RESIZABLE_MODERN] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1, -1];
    Bottom := [@InterfaceArea.Y2];

    Center.MaxWidth := 452;
    Center.MaxHeight := 276;
  end;
end;

var
  DepositBox: TRSDepositBox;

begin
  DepositBox.Setup('Deposit Box');
end;
