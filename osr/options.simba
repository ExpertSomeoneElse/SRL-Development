{$DEFINE SRL_OPTIONS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}
  
type 
  ERSOptionsTab = (
    CONTROLS, 
    AUDIO, 
    DISPLAY
  );
  
  ERSOptionsButton = (
    AID,
    RUN,
    HOUSE,
    BOND
  );

  TRSOptions = type TRSGameTab;

{$i elements/options.elements}

function TRSOptions.IsHouseOptionsOpen: Boolean;
begin
  Result := Self.ElementFindText(ERSOptionsElement.HOUSE_TITLE, [Self.COLOR_TEXT_ORANGE], 'House Options', RS_FONT_BOLD_12);
end;

function TRSOptions.OpenHouseOptions: Boolean;
begin
  if Self.IsHouseOptionsOpen then
    Exit(True);

  if not Self.Open() or not Self.OpenTab(ERSOptionsTab.CONTROLS) then
    Exit(False);

  Self.ElementClick(ERSOptionsElement.HOUSE);

  Result := WaitUntil(Self.IsHouseOptionsOpen, SRL.TruncatedGauss(50, 1500), 3000);
end;

function TRSOptions.CloseHouseOptions: Boolean;
begin
  if not Self.IsHouseOptionsOpen then
    Exit(True);

  Self.ElementClick(ERSOptionsElement.HOUSE_CLOSE);

  Result := WaitUntil(not Self.IsHouseOptionsOpen, SRL.TruncatedGauss(50, 1500), 3000);
end;

function TRSOptions.FindZoomSlider(var P: TPoint): Boolean;
var
  TPA: TPointArray;
begin
  Result := SRL.FindColors(TPA, CTS0(2106152), Self.ElementBounds(ERSOptionsElement.ZOOM_SLIDER).Expand(10)) > 0;
  if Result then
    P := TPA.Mean();
end;

function TRSOptions.GetZoomLevel: Int32;
var
  Slider: TPoint;
  B: TBox;
begin
  Result := -1;
  
  if Self.Open() and Self.OpenTab(ERSOptionsTab.CONTROLS) then
  begin
    B := Self.ElementBounds(ERSOptionsElement.ZOOM_SLIDER);
    if Self.FindZoomSlider(Slider) then
      Result := Round((Slider.X - B.X1) * 100 / (B.Width - 1))
  end;
end;

function TRSOptions.SetZoomLevel(Level: Int32): Boolean;
var
  CurrentLevel: Int32;
  Slider: TPoint;
  SliderBounds: TBox;
  Destination: TPoint;
begin
  CurrentLevel := Self.GetZoomLevel();
  if (CurrentLevel = Level) then
    Exit(True);

  SliderBounds := Self.ElementBounds(ERSOptionsElement.ZOOM_SLIDER);

  if Self.FindZoomSlider(Slider) then
  begin
    Destination.X := SliderBounds.X1 + Round((Level * (SliderBounds.Width - 1) / 100)) + 1;
    Destination.Y := Random(SliderBounds.Y1, SliderBounds.Y2);

    // Move slider away so we can click on destination
    if Distance(Slider, Destination) <= 12 then
    begin
      if CurrentLevel+20 < 100 then
        Self.SetZoomLevel(CurrentLevel + Random(20,40))
      else
        Self.SetZoomLevel(CurrentLevel - Random(20,40));  
    end;

    Mouse.Click(Destination, MOUSE_LEFT);
  end;

  Result := WaitUntil(Self.GetZoomLevel() = Level, SRL.TruncatedGauss(50, 1500), 3000);
end;

function TRSOptions.GetCurrentTab: ERSOptionsTab;
begin
  case Self.ElementRecognizeText(ERSOptionsElement.TITLE, [Self.COLOR_TEXT_ORANGE], RS_FONT_BOLD_12) of
    'Controls Settings': Result := ERSOptionsTab.CONTROLS;
    'Audio Settings':    Result := ERSOptionsTab.AUDIO;
    'Display Settings':  Result := ERSOptionsTab.DISPLAY;
  end;
end;

function TRSOptions.OpenTab(Tab: ERSOptionsTab): Boolean;
begin
  if not Self.Open or not Self.CloseHouseOptions then
    Exit(False);
  if Self.GetCurrentTab = Tab then
    Exit(True);

  case Tab of
    ERSOptionsTab.CONTROLS: Self.ElementClick(ERSOptionsElement.CONTROL_TAB);
    ERSOptionsTab.AUDIO:    Self.ElementClick(ERSOptionsElement.AUDIO_TAB);
    ERSOptionsTab.DISPLAY:  Self.ElementClick(ERSOptionsElement.DISPLAY_TAB);
  end;

  Result := WaitUntil(Self.GetCurrentTab = Tab, SRL.TruncatedGauss(50, 1500), 3000);
end;

procedure TRSOptions.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen then
    Exit;

  inherited();
end;

var
  Options: TRSOptions;

begin
  Options.Setup('Options', [@Options.SetupAlignment, @Options.Draw, @Options._IsOpen]);
  Options.ID := ERSGameTab.OPTIONS;
end;

function TRSGameTabs.GetCurrentTab: ERSGameTab; override;
begin
  Result := inherited;
  
  if (Result = ERSGameTab.UNKNOWN) and Options.IsHouseOptionsOpen then
    Result := ERSGameTab.OPTIONS;
end;

